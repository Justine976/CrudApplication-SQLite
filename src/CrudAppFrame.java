import java.awt.print.PrinterException;
import java.io.*;
import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Admin
 */
public class CrudAppFrame extends javax.swing.JFrame {

    /**
     * Creates new form ApplicationFrame
     */
    public CrudAppFrame() {

        initComponents();
        setLocationRelativeTo(null);

        fetch();
        loadProductNo();

    }
    
    private void loadProductNo(){
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){ 
            
            PreparedStatement pstmt = connection.prepareStatement("SELECT productId FROM products");
            ResultSet rs = pstmt.executeQuery();
            productIdBox.removeAllItems();
            while (rs.next()){
                productIdBox.addItem(rs.getString(1));
            }
        } catch (Exception ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fetch(){
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){
            Statement stmt = connection.createStatement();
            String createEmployeeTable = "CREATE TABLE IF NOT EXISTS products (" +
                "productId INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, "+
                "productName TEXT NOT NULL UNIQUE, " +
                "productPrice REAL NOT NULL, " +
                "productQty INTEGER NOT NULL)";
            stmt.execute(createEmployeeTable);

            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM products");
            ResultSet rs = pstmt.executeQuery();
            ResultSetMetaData rsmt = rs.getMetaData();
            int columnCount = rsmt.getColumnCount();
            
            DefaultTableModel dtm = (DefaultTableModel)productsTable.getModel();
            dtm.setRowCount(0);
            while(rs.next()){
                Vector v2 = new Vector();
                for (int i = 1; i <= columnCount; i++){
                    v2.add(rs.getString("productId"));
                    v2.add(rs.getString("productName"));
                    v2.add(rs.getString("productPrice"));
                    v2.add(rs.getString("productQty"));
                }
                dtm.addRow(v2);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Fetching Failed!\n"+ex.getLocalizedMessage());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        exportCsvButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        importCsvButton = new javax.swing.JButton();
        deleteAllDataButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        productIdBox = new javax.swing.JComboBox<>();
        productIdLabel = new javax.swing.JLabel();
        productPriceLabel = new javax.swing.JLabel();
        productNameLabel = new javax.swing.JLabel();
        productQtyLabel = new javax.swing.JLabel();
        productNameField = new javax.swing.JTextField();
        productPriceField = new javax.swing.JTextField();
        productQtyField = new javax.swing.JTextField();
        productTableScroll = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        crudAppLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CRUD Application");
        setName("crudFrame"); // NOI18N

        buttonPanel.setBackground(new java.awt.Color(102, 102, 255));

        exportCsvButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exportCsvButton.setText("EXPORT/csv");
        exportCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCsvButtonActionPerformed(evt);
            }
        });

        printButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        printButton.setText("PRINT");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        importCsvButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        importCsvButton.setText("IMPORT/csv");
        importCsvButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCsvButtonActionPerformed(evt);
            }
        });

        deleteAllDataButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteAllDataButton.setText("DELETE ALL DATA");
        deleteAllDataButton.setMaximumSize(new java.awt.Dimension(100, 25));
        deleteAllDataButton.setMinimumSize(new java.awt.Dimension(100, 25));
        deleteAllDataButton.setPreferredSize(new java.awt.Dimension(100, 25));
        deleteAllDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exportCsvButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(printButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(importCsvButton, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(deleteAllDataButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(deleteAllDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importCsvButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportCsvButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(215, Short.MAX_VALUE))
        );

        searchButton.setBackground(new java.awt.Color(70, 70, 255));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        productIdBox.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        productIdBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        productIdBox.setMaximumSize(new java.awt.Dimension(100, 25));
        productIdBox.setMinimumSize(new java.awt.Dimension(100, 25));
        productIdBox.setPreferredSize(new java.awt.Dimension(100, 25));
        productIdBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productIdBoxActionPerformed(evt);
            }
        });

        productIdLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        productIdLabel.setText("Product ID:");

        productPriceLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        productPriceLabel.setText("Product Price: ");

        productNameLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        productNameLabel.setText("Product Name:");

        productQtyLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        productQtyLabel.setText("Product Qty:");

        productNameField.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        productNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productNameFieldActionPerformed(evt);
            }
        });

        productPriceField.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        productPriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productPriceFieldActionPerformed(evt);
            }
        });

        productQtyField.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        productQtyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productQtyFieldActionPerformed(evt);
            }
        });

        productTableScroll.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        productsTable.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Product Price", "Product Qty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTableScroll.setViewportView(productsTable);
        if (productsTable.getColumnModel().getColumnCount() > 0) {
            productsTable.getColumnModel().getColumn(0).setResizable(false);
            productsTable.getColumnModel().getColumn(1).setResizable(false);
            productsTable.getColumnModel().getColumn(2).setResizable(false);
            productsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        crudAppLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        crudAppLabel.setText("CRUD APP");

        addButton.setBackground(new java.awt.Color(70, 70, 255));
        addButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(255, 255, 255));
        addButton.setText("ADD");
        addButton.setMaximumSize(new java.awt.Dimension(100, 25));
        addButton.setMinimumSize(new java.awt.Dimension(100, 25));
        addButton.setPreferredSize(new java.awt.Dimension(100, 25));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(70, 70, 255));
        updateButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(255, 255, 255));
        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(70, 70, 255));
        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(255, 255, 255));
        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productTableScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(productIdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(productIdBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(productQtyLabel)
                                        .addGap(25, 25, 25)
                                        .addComponent(productQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(productNameLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(productNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(productPriceLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(productPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(93, 93, 93)
                                .addComponent(crudAppLabel)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productNameLabel)
                    .addComponent(productNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productPriceLabel)
                    .addComponent(productPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crudAppLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productQtyLabel)
                    .addComponent(productQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productIdBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){ 
            String productId = productIdBox.getSelectedItem().toString();
            
            PreparedStatement pstmt = connection.prepareStatement("SELECT * FROM products WHERE productId = ?");
            pstmt.setString(1, productId);
            
            ResultSet rs = pstmt.executeQuery();
            if (rs.next() == true){
                productNameField.setText(rs.getString(2));
                productPriceField.setText(rs.getString(3));
                productQtyField.setText(rs.getString(4));
            } else {
                JOptionPane.showMessageDialog(this, "No Record Found!");
            }
        } catch (Exception ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Searching Failed!\n"+ex.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){
            if (productNameField.getText().isEmpty() || 
            productPriceField.getText().isEmpty() || 
            productQtyField.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "All Field Most be Filled Out!");
                
            } else {
                String productName = productNameField.getText();
                double productPrice = Double.parseDouble(productPriceField.getText());
                int productQty = Integer.parseInt(productQtyField.getText());
                
                PreparedStatement pstmt = connection.prepareStatement("INSERT INTO products(productName, productPrice, productQty) VALUES (?, ?, ?)");
                pstmt.setString(1, productName);
                pstmt.setDouble(2, productPrice);
                pstmt.setInt(3, productQty);
            
                pstmt.execute();
                
                productNameField.setText("");
                productPriceField.setText("");
                productQtyField.setText("");

                fetch();
                loadProductNo();
                
                JOptionPane.showMessageDialog(this, "Product Added! \nProduct Name: "+productName);
            }
        } catch (SQLException ex) {
            if (ex.getMessage().contains("UNIQUE constraint failed")) {
                JOptionPane.showMessageDialog(this, "Duplicate Value! This Product Might Alredy Exist.");
            }
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product Adding Failed!\n"+ex.getMessage());
        } catch (NumberFormatException numEX){
            JOptionPane.showMessageDialog(this, "Price and Quantity Field Most be a Number!");
        } catch (Exception ex){
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product Adding Failed!\n"+ex.getMessage());
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void productIdBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productIdBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productIdBoxActionPerformed

    private void productQtyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productQtyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productQtyFieldActionPerformed

    private void productPriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productPriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productPriceFieldActionPerformed

    private void productNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productNameFieldActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){
            if (productNameField.getText().isEmpty() || 
            productPriceField.getText().isEmpty() || 
            productQtyField.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "All Fields Most be Filled Out! \nPlease Select Product ID then Click Search Before Updating.");
                
            } else {
                int productId = Integer.parseInt(productIdBox.getSelectedItem().toString());
                String productName = productNameField.getText();
                double productPrice = Double.parseDouble(productPriceField.getText());
                int productQty = Integer.parseInt(productQtyField.getText());
                
                PreparedStatement pstmt = connection.prepareStatement("UPDATE products SET productName = ?, productPrice = ?, productQty = ? WHERE productId = ?");
                pstmt.setString(1, productName);
                pstmt.setDouble(2, productPrice);
                pstmt.setInt(3, productQty);
                pstmt.setInt(4, productId);

                if (JOptionPane.showConfirmDialog(this, "Are you sure you want to Update this Product?\nProduct ID: "+productId+"\nProduct Name: "+productName,
                "Confimation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                    
                    pstmt.execute();
                
                    productNameField.setText("");
                    productPriceField.setText("");
                    productQtyField.setText("");

                    fetch();
                    loadProductNo();

                    JOptionPane.showMessageDialog(this, "Product Updated! \nProduct ID: "+productId+"\nProduct Name: "+productName);
                }
            }
        } catch (SQLException ex) {
            if (ex.getMessage().contains("UNIQUE constraint failed")) {
                JOptionPane.showMessageDialog(this, "Duplicate Value! This Product Might Already Exist.");
            }
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product Updating Failed!\n"+ex.getMessage());
        } catch (NumberFormatException numEX){
            JOptionPane.showMessageDialog(this, "Price and Quantity Field Most be a Number!");
        } catch (Exception ex){
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product Updating Failed!\n"+ex.getMessage());
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){ 
            int productId = Integer.parseInt(productIdBox.getSelectedItem().toString());
            
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to Delete this?\nProduct ID: "+productId,
            "Confimation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){

                PreparedStatement pstmt = connection.prepareStatement("DELETE FROM products WHERE productId = ?");
                pstmt.setInt(1, productId);

                pstmt.execute();

                fetch();
                loadProductNo();
                
                JOptionPane.showMessageDialog(this, "Product Deleted! \nProduct ID: "+productId);
            }
        } catch (Exception ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product Deleting Failed!\n"+ex.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        try {
            productsTable.print();
            JOptionPane.showMessageDialog(this, "Print Done!");
        } catch (PrinterException ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Printing Failed!\n"+ex.getMessage());
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void exportCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCsvButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as CSV");
        
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            
            if (!fileToSave.getName().toLowerCase().endsWith(".csv")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".csv");
            }
            
            try (FileWriter fw = new FileWriter(fileToSave);
                 BufferedWriter bw = new BufferedWriter(fw)) {
                
                TableModel model = productsTable.getModel();
                
                for (int i = 0; i < model.getColumnCount(); i++) {
                    bw.write(model.getColumnName(i));
                    if (i < model.getColumnCount() - 1) bw.write(",");
                }
                bw.newLine();
                
                for (int row = 0; row < model.getRowCount(); row++) {
                    for (int col = 0; col < model.getColumnCount(); col++) {
                        Object value = model.getValueAt(row, col);
                        bw.write(value == null ? "" : value.toString());
                        if (col < model.getColumnCount() - 1) bw.write(",");
                    }
                    bw.newLine();
                }
                
                fetch();
                loadProductNo();
                
                JOptionPane.showMessageDialog(null, "Export Done! \nFile Location: " + fileToSave.getAbsolutePath());
            } catch (Exception ex) {
                Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Exporting Failed!\n"+ex.getMessage());
            }
        }
    }//GEN-LAST:event_exportCsvButtonActionPerformed

    private void importCsvButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCsvButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Import CSV into Database");
        
        int userSelection = fileChooser.showOpenDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();

            try (BufferedReader br = new BufferedReader(new FileReader(fileToOpen));
                Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")) {

                String line;
                boolean firstLine = true;

                PreparedStatement pstmt = connection.prepareStatement("INSERT INTO products (productName, productPrice, productQty) VALUES (?, ?, ?)");

                while ((line = br.readLine()) != null) {
                    if (firstLine) {
                        firstLine = false;
                        continue;
                    }

                    String[] data = line.split(",");

                    String productName = data[1].trim();
                    double productPrice = Double.parseDouble(data[2].trim());
                    int productQty = Integer.parseInt(data[3].trim());

                    pstmt.setString(1, productName);
                    pstmt.setDouble(2, productPrice);
                    pstmt.setInt(3, productQty);

                    pstmt.executeUpdate();
                }
                
                fetch();
                loadProductNo();

                JOptionPane.showMessageDialog(null, "Import Done!");

            } catch (SQLException ex) {
                if (ex.getMessage().contains("UNIQUE constraint failed")) {
                    JOptionPane.showMessageDialog(this, "Duplicate Value! \nThe CSV File May Contain Products That Maybe Already Existed.");
                }
                Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Importing Failed!\n" + ex.getMessage());
            } catch (Exception ex){
                Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Importing Failed!\n" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_importCsvButtonActionPerformed

    private void deleteAllDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllDataButtonActionPerformed
        try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){
            if (JOptionPane.showConfirmDialog(this, "Do you Want to Export Before Deleting?",
            "Confimation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                exportCsvButtonActionPerformed(evt);
            }
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to DELETE ALL DATA?",
            "Confimation", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                Statement stmt = connection.createStatement();
                
                stmt.execute("DROP TABLE IF EXISTS products");

                fetch();
                loadProductNo();

                JOptionPane.showMessageDialog(this, "All Data Deleted!");
            }
        } catch (Exception ex) {
            Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Deleting All Data Failed!\n"+ex.getLocalizedMessage());
        }
    }//GEN-LAST:event_deleteAllDataButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CrudAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CrudAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CrudAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CrudAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try (Connection connection = DriverManager.getConnection("jdbc:sqlite:crudApplication.db")){
                    Statement stmt = connection.createStatement();
                    String createEmployeeTable = "CREATE TABLE IF NOT EXISTS products (" +
                        "productId INTEGER PRIMARY KEY AUTOINCREMENT, "+
                        "productName TEXT NOT NULL UNIQUE, " +
                        "productPrice REAL NOT NULL, " +
                        "productQty INTEGER NOT NULL)";
                    stmt.execute(createEmployeeTable);

                    new CrudAppFrame().setVisible(true);
                    
                } catch (Exception ex) {
                    Logger.getLogger(CrudAppFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Opening Failed!\n"+ex.getLocalizedMessage());
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel crudAppLabel;
    private javax.swing.JButton deleteAllDataButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exportCsvButton;
    private javax.swing.JButton importCsvButton;
    private javax.swing.JButton printButton;
    private javax.swing.JComboBox<String> productIdBox;
    private javax.swing.JLabel productIdLabel;
    private javax.swing.JTextField productNameField;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JTextField productPriceField;
    private javax.swing.JLabel productPriceLabel;
    private javax.swing.JTextField productQtyField;
    private javax.swing.JLabel productQtyLabel;
    private javax.swing.JScrollPane productTableScroll;
    private javax.swing.JTable productsTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
